resources:
  repositories:
    - repository: myGitHubRepo
      type: github
      name: ThomasB98/BookStore
      endpoint: github.com_ThomasB98

trigger:
- main

variables:
  vmConnectionName: 'bookstorebk'
  vmIpAddress: '172.179.232.92'
  projectName: 'BookStore'
  deployPath: '/home/azureuser/BookStore'

stages:
- stage: Build
  jobs:
  - job: BuildJob
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseDotNet@2
      inputs:
        version: '6.0.408'
    
    - task: DotNetCoreCLI@2
      inputs:
        command: 'restore'
        projects: '**/*.csproj'
      displayName: 'Restore NuGet packages'
      
    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'
      displayName: 'Build the project'
    
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'
      displayName: 'Publish build artifacts'

- stage: Deploy
  dependsOn: Build
  jobs:
  - deployment: DeployToVM
    environment: 'Production'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: 'drop'
              path: '$(Pipeline.Workspace)/drop'
          - task: SSH@0
            inputs:
              sshEndpoint: '$(vmConnectionName)'
              runOptions: 'commands'
              commands: |
                # Create directory with proper permissions
                sudo mkdir -p $(deployPath)
                sudo chown azureuser:azureuser $(deployPath)
                sudo chmod 755 $(deployPath)
          - task: CopyFilesOverSSH@0
            inputs:
              sshEndpoint: '$(vmConnectionName)'
              sourceFolder: '$(Pipeline.Workspace)/drop'
              targetFolder: '$(deployPath)'    
              cleanTargetFolder: true
          - task: SSH@0
            inputs:
              sshEndpoint: '$(vmConnectionName)'
              runOptions: 'commands'
              commands: |
                # Set appropriate permissions
                chmod -R 755 $(deployPath)
                # Stop existing service if running
                sudo systemctl stop $(projectName).service || true

                # Reload systemd to apply changes
                sudo systemctl daemon-reload

                # Start the service
                sudo systemctl start $(projectName).service

                # Enable service to start on boot
                sudo systemctl enable $(projectName).service


